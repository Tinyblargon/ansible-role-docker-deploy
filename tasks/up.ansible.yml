---
- name: Update apt and install rsync and sudo
  ansible.builtin.apt:
    name:
      - sudo
      - rsync
    cache_valid_time: 3600
    update_cache: true
  register: apt_action
  become: true
  when: ansible_os_family == 'Debian'

- name: Ensure destination directory exists
  ansible.builtin.file:
    path: "{{ docker_deploy_destination }}"
    state: directory
    mode: "0755"
  become: true

- name: Copy the deployment
  ansible.posix.synchronize:
    src: "{{ docker_deploy_source }}/"
    dest: "{{ docker_deploy_destination }}"
    archive: false
    checksum: true
    owner: false
    group: false
    delete: false
    dirs: true
    recursive: true
    rsync_opts: >-
      {{
        ['--delete'] + docker_deploy_rsync_opts +
        (docker_deploy_files |
          selectattr('dest', 'defined') |
          map(attribute='dest') |
          map('regex_replace', '^./', '') |
          map('regex_replace', '^', '--exclude="') |
          map('regex_replace', '$', '"') |
          list)
      }}
  register: docker_deploy_rsync_changed
  become: true

- name: Create directories
  ansible.builtin.file:
    path: "{{ docker_deploy_destination }}/{{ item.dest | regex_replace('^(.*/)([^/]+)$', '\\1') | regex_replace('/$', '') }}"
    state: directory
    owner: "{{ item.owner if item.owner is defined else 'root' }}"
    group: "{{ item.group if item.group is defined else 'root' }}"
    mode: "{{ omit }}"
  loop: "{{ docker_deploy_files }}"
  when: >-
    item.dest is defined and '/' in item.dest | regex_replace('^./', '')
  become: true
  loop_control:
    label: >-
      {{ 'dest="' + (item.dest | regex_replace('^(.*/)([^/]+)$', '\1') |
      regex_replace('/$', '')) + '"'
      if item.dest is defined else 'no dest configured' }}
  no_log: "{{ item.no_log | default(false) }}"

- name: Copy individual files and directories
  ansible.builtin.copy:
    content: >-
      {{ item.content if item.content is defined else
      "" if item.src is not defined else
      omit }}
    dest: "{{ docker_deploy_destination }}/{{ item.dest }}"
    src: "{{ item.src if item.src is defined else omit }}"
    owner: "{{ item.owner if item.owner is defined else 'root' }}"
    group: "{{ item.group if item.group is defined else 'root' }}"
    mode: "{{ item.mode if item.mode is defined else omit }}"
  loop: "{{ docker_deploy_files }}"
  when: item.dest is defined and item.dest != ""
  become: true
  register: docker_deploy_copy_changed
  loop_control:
    label: >-
      {{ 'dest="' + item.dest + '"' if item.dest is defined else
      'no dest configured' }}
  no_log: "{{ item.no_log | default(false) }}"

- name: Attempt to bring up docker containers
  block:
    - name: Docker compose up
      ansible.builtin.command: >-
        {{ docker_deploy_compose_command }}
        --file {{ docker_deploy_destination }}/{{ docker_deploy_compose_file }}
        {{ '--compatibility' if docker_deploy_compatibility is true else '' }}
        up
        {{ '--build' if (docker_deploy_build is true
        and docker_deploy_files_changed) else '' }}
        --detach
        {{ '--force-recreate' if (docker_deploy_recreate is true
          and docker_deploy_files_changed) else '' }}
        --quiet-pull
        {{ '--remove-orphans' if docker_deploy_remove_orphans is true else '' }}
      notify: docker prune
      register: docker_deploy_command_result
      become: true
      no_log: true
      changed_when: |
        ("Created" in docker_deploy_command_result.stderr) or
        ("Recreated" in docker_deploy_command_result.stderr) or
        ("Removed" in docker_deploy_command_result.stderr) or
        ("Started" in docker_deploy_command_result.stderr)

    - name: Show warnings
      ansible.builtin.include_tasks: warning.ansible.yml
      when: docker_deploy_show_warnings is true
        and docker_deploy_command_result.stderr_lines is defined
        and docker_deploy_warnings | length > 0
  rescue:
    - name: Display compose command
      ansible.builtin.debug:
        msg: "{{ ansible_failed_result.cmd | join(' ') }}"
    - name: Display error message
      ansible.builtin.fail:
        msg: "{{ ansible_failed_result.stderr | regex_replace('^\\s+', '') }}"
